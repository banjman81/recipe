{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","props","className","name","calories","src","image","alt","ingredients","map","ingredient","text","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","APP_ID","process","APP_KEY","a","fetch","response","json","data","hits","console","log","getRecipes","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","url","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAoBeA,MAlBf,SAAgBC,GACZ,OACI,sBAAKC,UAAU,OAAf,UACI,6BAAKD,EAAME,OACX,4BAAIF,EAAMG,WACV,qBAAKC,IAAKJ,EAAMK,MAAOC,IAAI,KAC3B,oBAAIL,UAAU,WAAd,SACKD,EAAMO,YAAYC,KAAI,SAAAC,GAAU,OAC7B,6BACKA,EAAWC,gBCkDrBC,MAzDf,WAEE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,WAAnC,mBAAOK,EAAP,KAAcC,EAAd,KA4BA,OAxBAC,qBAAU,WACR,IAAMC,EAASC,WACTC,EAASD,mCAFF,4CAGb,8BAAAE,EAAA,sEACuBC,MAAM,uDAAD,OAAwDP,EAAxD,mBAAwEG,EAAxE,oBAA0FE,IADtH,cACMG,EADN,gBAEmBA,EAASC,OAF5B,OAEMC,EAFN,OAGAb,EAAWa,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJjB,4CAHa,0DASbG,KACC,CAACd,IAeF,sBAAKhB,UAAU,MAAf,UACE,oBAAIA,UAAU,SAAd,2BACA,uBAAM+B,SATV,SAAmBC,GACjBA,EAAEC,iBACFhB,EAASH,GACTC,EAAU,KAMmBf,UAAU,cAArC,UACE,uBAAOA,UAAU,aAAakC,KAAK,OAAOC,MAAOrB,EAAQsB,SAd/D,SAAsBJ,GACpBjB,EAAUiB,EAAEK,OAAOF,UAcf,wBAAQnC,UAAU,gBAAgBkC,KAAK,SAAvC,uBAIF,qBAAKlC,UAAU,gBAAf,SACGY,EAAQL,KAAK,SAAA+B,GAAM,OAClB,cAAC,EAAD,CAEErC,KAAMqC,EAAOA,OAAOC,MACpBrC,SAAUoC,EAAOA,OAAOpC,SACxBE,MAAOkC,EAAOA,OAAOlC,MACrBE,YAAcgC,EAAOA,OAAOhC,aAJvBgC,EAAOA,OAAOE,cCpChBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.29133aa5.chunk.js","sourcesContent":["import React from  'react';\n\nfunction Recipe(props){ // props can also be named individually by deconstructing it\n    return(\n        <div className=\"card\">\n            <h4>{props.name}</h4>\n            <p>{props.calories}</p>\n            <img src={props.image} alt=\"\" />\n            <ul className=\"ing-list\">\n                {props.ingredients.map(ingredient =>(\n                    <li>\n                        {ingredient.text}\n                    </li>\n                ))}\n            </ul>\n            \n        </div>\n    )\n}\n\nexport default Recipe;","import React, { useState, useEffect} from 'react';\nimport './App.css';\nimport Recipe from './Recipe';\n\nfunction App(){\n\n  const [recipes, setRecipes] = useState([])\n  const [search, setSearch] = useState('')\n  const [query, setQuery] = useState('chicken')\n\n  \n\n  useEffect(() =>{\n    const APP_ID = process.env.REACT_APP_APP_ID;\n    const APP_KEY= process.env.REACT_APP_APP_KEY;\n    async function getRecipes(){\n    const response = await fetch(`https://api.edamam.com/api/recipes/v2?type=public&q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  }\n    getRecipes();\n  }, [query]);// this [] contains the value that will update useeffect. useEffect will run every time this value is changed\n\n\n\n  function updateSearch(e){\n    setSearch(e.target.value);// ---this is require to cmake changes ot input state\n  }\n\n  function getSearch(e){\n    e.preventDefault(); // This stops page refresh\n    setQuery(search)\n    setSearch('')\n  }\n\n  return(\n    <div className=\"App\">\n      <h1 className=\"header\">Recipe Finder</h1>\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch}/>\n        <button className=\"search-button\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      <div className=\"recipes-cards\">\n        {recipes.map( recipe =>(\n          <Recipe \n            key={recipe.recipe.url}\n            name={recipe.recipe.label} \n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients ={recipe.recipe.ingredients}/>\n        ))}\n      </div>\n      \n    </div>\n  )\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}